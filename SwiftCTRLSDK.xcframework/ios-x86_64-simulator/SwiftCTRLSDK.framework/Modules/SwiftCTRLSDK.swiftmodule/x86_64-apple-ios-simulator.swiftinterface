// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftCTRLSDK
import Combine
import CryptoKit
import Foundation
import Swift
@_exported import SwiftCTRLSDK
import UIKit
public struct ApiSystemTokenResponse : Swift.Codable {
  public let system_access_token: Swift.String
  public let refresh_token: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum HTTPError : Swift.Error, Foundation.LocalizedError {
  case badRequest(description: Swift.String?)
  case unauthorized(description: Swift.String?)
  case notFound(description: Swift.String?)
  case serverError(description: Swift.String?)
  case unprocessableRequest(description: Swift.String?)
  case unknown(description: Swift.String?)
}
public struct ApiUserPublicKeyResponse : Swift.Codable {
  public let userToken: Swift.String
  public let userTokenExpires: Foundation.Date
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol SwiftCtrlObserver : AnyObject {
  func didFinishInitialization()
  func reportError(error: Foundation.NSError)
  func didReceiveQRCode(qrView: UIKit.UIImageView)
}
@_hasMissingDesignatedInitializers public class SwiftCtrl {
  public static let shared: SwiftCTRLSDK.SwiftCtrl
  public func initialize(with userToken: Swift.String, delegate: SwiftCTRLSDK.SwiftCtrlObserver)
  public func registerForQRCode(userToken: Swift.String)
  public func unregisterForQRCode(userToken: Swift.String)
  public func disconnect()
  @objc deinit
}
public struct ApiUserTokenResponse : Swift.Codable {
  public let userId: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
